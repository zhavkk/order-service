// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/zhavkk/order-service/internal/models"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), ctx, order)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepository) GetOrderByID(ctx context.Context, orderID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByID), ctx, orderID)
}

// GetRecentOrders mocks base method.
func (m *MockOrderRepository) GetRecentOrders(ctx context.Context, limit int) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentOrders", ctx, limit)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentOrders indicates an expected call of GetRecentOrders.
func (mr *MockOrderRepositoryMockRecorder) GetRecentOrders(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetRecentOrders), ctx, limit)
}

// MockDeliveryRepository is a mock of DeliveryRepository interface.
type MockDeliveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryRepositoryMockRecorder
}

// MockDeliveryRepositoryMockRecorder is the mock recorder for MockDeliveryRepository.
type MockDeliveryRepositoryMockRecorder struct {
	mock *MockDeliveryRepository
}

// NewMockDeliveryRepository creates a new mock instance.
func NewMockDeliveryRepository(ctrl *gomock.Controller) *MockDeliveryRepository {
	mock := &MockDeliveryRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryRepository) EXPECT() *MockDeliveryRepositoryMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockDeliveryRepository) CreateDelivery(ctx context.Context, delivery *models.Delivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", ctx, delivery)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockDeliveryRepositoryMockRecorder) CreateDelivery(ctx, delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockDeliveryRepository)(nil).CreateDelivery), ctx, delivery)
}

// GetDeliveryByOrderID mocks base method.
func (m *MockDeliveryRepository) GetDeliveryByOrderID(ctx context.Context, orderID string) (*models.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*models.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryByOrderID indicates an expected call of GetDeliveryByOrderID.
func (mr *MockDeliveryRepositoryMockRecorder) GetDeliveryByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryByOrderID", reflect.TypeOf((*MockDeliveryRepository)(nil).GetDeliveryByOrderID), ctx, orderID)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentRepository) CreatePayment(ctx context.Context, payment *models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentRepositoryMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentRepository)(nil).CreatePayment), ctx, payment)
}

// MockItemsRepository is a mock of ItemsRepository interface.
type MockItemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemsRepositoryMockRecorder
}

// MockItemsRepositoryMockRecorder is the mock recorder for MockItemsRepository.
type MockItemsRepositoryMockRecorder struct {
	mock *MockItemsRepository
}

// NewMockItemsRepository creates a new mock instance.
func NewMockItemsRepository(ctrl *gomock.Controller) *MockItemsRepository {
	mock := &MockItemsRepository{ctrl: ctrl}
	mock.recorder = &MockItemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsRepository) EXPECT() *MockItemsRepositoryMockRecorder {
	return m.recorder
}

// AddItems mocks base method.
func (m *MockItemsRepository) AddItems(ctx context.Context, orderID string, items []*models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItems", ctx, orderID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItems indicates an expected call of AddItems.
func (mr *MockItemsRepositoryMockRecorder) AddItems(ctx, orderID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItems", reflect.TypeOf((*MockItemsRepository)(nil).AddItems), ctx, orderID, items)
}

// GetItemsByOrderID mocks base method.
func (m *MockItemsRepository) GetItemsByOrderID(ctx context.Context, orderID string) ([]*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByOrderID indicates an expected call of GetItemsByOrderID.
func (mr *MockItemsRepositoryMockRecorder) GetItemsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByOrderID", reflect.TypeOf((*MockItemsRepository)(nil).GetItemsByOrderID), ctx, orderID)
}

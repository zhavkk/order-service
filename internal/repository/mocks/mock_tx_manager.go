// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pgstorage/tx_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTxManagerInterface is a mock of TxManagerInterface interface.
type MockTxManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerInterfaceMockRecorder
}

// MockTxManagerInterfaceMockRecorder is the mock recorder for MockTxManagerInterface.
type MockTxManagerInterfaceMockRecorder struct {
	mock *MockTxManagerInterface
}

// NewMockTxManagerInterface creates a new mock instance.
func NewMockTxManagerInterface(ctrl *gomock.Controller) *MockTxManagerInterface {
	mock := &MockTxManagerInterface{ctrl: ctrl}
	mock.recorder = &MockTxManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManagerInterface) EXPECT() *MockTxManagerInterfaceMockRecorder {
	return m.recorder
}

// RunReadCommited mocks base method.
func (m *MockTxManagerInterface) RunReadCommited(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadCommited", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadCommited indicates an expected call of RunReadCommited.
func (mr *MockTxManagerInterfaceMockRecorder) RunReadCommited(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadCommited", reflect.TypeOf((*MockTxManagerInterface)(nil).RunReadCommited), ctx, f)
}

// RunReadUncommited mocks base method.
func (m *MockTxManagerInterface) RunReadUncommited(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadUncommited", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadUncommited indicates an expected call of RunReadUncommited.
func (mr *MockTxManagerInterfaceMockRecorder) RunReadUncommited(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadUncommited", reflect.TypeOf((*MockTxManagerInterface)(nil).RunReadUncommited), ctx, f)
}

// RunRepeatableRead mocks base method.
func (m *MockTxManagerInterface) RunRepeatableRead(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRepeatableRead", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRepeatableRead indicates an expected call of RunRepeatableRead.
func (mr *MockTxManagerInterfaceMockRecorder) RunRepeatableRead(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRepeatableRead", reflect.TypeOf((*MockTxManagerInterface)(nil).RunRepeatableRead), ctx, f)
}

// RunSerializable mocks base method.
func (m *MockTxManagerInterface) RunSerializable(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSerializable", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSerializable indicates an expected call of RunSerializable.
func (mr *MockTxManagerInterfaceMockRecorder) RunSerializable(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSerializable", reflect.TypeOf((*MockTxManagerInterface)(nil).RunSerializable), ctx, f)
}
